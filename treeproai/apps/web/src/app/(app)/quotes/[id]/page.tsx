"use client";

import { useParams, useRouter } from "next/navigation";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import useApiClient from "@/hooks/useApiClient";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { toast } from "sonner";

export default function QuoteDetailsPage() {
  const params = useParams();
  const router = useRouter();
  const queryClient = useQueryClient();
  const quoteId = params.id as string;
  const apiClient = useApiClient();

  const { data: quote, isLoading } = useQuery({
    queryKey: ["quote", quoteId],
    queryFn: async () => {
      const response = await apiClient.get(`/quotes/${quoteId}`);
      return response.data;
    },
    enabled: !!quoteId,
  });

  const acceptMutation = useMutation({
    mutationFn: () => apiClient.post(`/quotes/${quoteId}/accept`),
    onSuccess: (data: { data: { jobId: string } }) => {
      toast.success("Quote accepted! Job created.");
      queryClient.invalidateQueries({ queryKey: ["quote", quoteId] });
      router.push(`/jobs/${data.data.jobId}`);
    },
    onError: () => toast.error("Failed to accept quote."),
  });

  if (isLoading) {
    return <Skeleton className="w-full h-96" />;
  }

  if (!quote) {
    return <div>Quote not found.</div>;
  }

  return (
    <div className="container mx-auto max-w-4xl py-8 space-y-6">
      <div className="flex justify-between items-start">
        <div>
          <h1 className="text-3xl font-bold">Quote #{quote.id.substring(0, 8)}</h1>
          <p className="text-muted-foreground">Generated by TreeProAI</p>
        </div>
        <div className="flex items-center gap-2">
          <Badge variant={quote.status === 'DRAFT' ? 'secondary' : 'default'}>{quote.status}</Badge>
          {quote.status === 'DRAFT' && <Button onClick={() => alert('Send dialog not implemented yet.')}>Send Quote</Button>}
          {quote.status === 'SENT' && <Button onClick={() => acceptMutation.mutate()}>Accept Quote</Button>}
        </div>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>AI Analysis & Findings</CardTitle>
          {quote.aiFindings?.confidence && <CardDescription>Confidence: {(quote.aiFindings.confidence * 100).toFixed(0)}%</CardDescription>}
        </CardHeader>
        <CardContent className="space-y-4">
          {quote.aiFindings?.trees?.map((tree: any) => (
            <div key={tree.id} className="p-4 border rounded-md">
              <h4 className="font-semibold">{tree.species}</h4>
              <p className="text-sm text-muted-foreground">
                Height: {tree.height_m}m, Trunk Diameter: {tree.dbh_cm}cm
              </p>
              {tree.hazards?.length > 0 && (
                <div className="mt-2">
                  <span className="text-sm font-medium">Hazards: </span>
                  {tree.hazards.map((h: string) => <Badge key={h} variant="destructive" className="mr-1">{h}</Badge>)}
                </div>
              )}
            </div>
          ))}
           {quote.aiFindings?.notes && <p className="text-sm text-muted-foreground italic">Notes: {quote.aiFindings.notes.join(' ')}</p>}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Price Estimate</CardTitle>
        </CardHeader>
        <CardContent>
            {/* Line items would be rendered here */}
            <div className="text-2xl font-bold text-right">
                Total: ${parseFloat(quote.total).toFixed(2)}
            </div>
        </CardContent>
      </Card>
    </div>
  );
}