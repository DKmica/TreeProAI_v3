"use client";

import { useParams } from "next/navigation";
import { useQuery } from "@tanstack/react-query";
import useApiClient from "@/hooks/useApiClient";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Badge } from "@/components/ui/badge";

export default function QuoteDetailsPage() {
  const params = useParams();
  const quoteId = params.id as string;
  const apiClient = useApiClient();

  // This is a mock query. In a real app, you'd fetch from /quotes/:id
  const { data: quote, isLoading } = useQuery({
    queryKey: ["quote", quoteId],
    queryFn: async () => {
      // MOCK: In a real app, this would be an API call
      // const response = await apiClient.get(`/quotes/${quoteId}`);
      // return response.data;
      return {
        id: quoteId,
        total: 1375.50,
        status: "DRAFT",
        aiFindings: {
          trees: [
            { id: 't1', species: 'Oak (est.)', dbh_cm: 61.5, height_m: 17.2, hazards: ['near_house'] },
            { id: 't2', species: 'Maple (est.)', dbh_cm: 45.0, height_m: 12.0, hazards: ['possible_powerline'] }
          ],
          confidence: 0.78,
          notes: ["Heuristic mode active.", "Powerline proximity requires on-site verification."]
        },
        lineItems: [
            { description: "Work on Oak (est.)", unit_price: 850.00 },
            { description: "Work on Maple (est.)", unit_price: 525.50 }
        ]
      };
    },
    enabled: !!quoteId,
  });

  if (isLoading) {
    return <Skeleton className="w-full h-96" />;
  }

  if (!quote) {
    return <div>Quote not found.</div>;
  }

  return (
    <div className="container mx-auto max-w-4xl py-8 space-y-6">
      <div className="flex justify-between items-start">
        <div>
          <h1 className="text-3xl font-bold">Quote #{quote.id.substring(0, 8)}</h1>
          <p className="text-muted-foreground">Generated by TreeProAI</p>
        </div>
        <Badge variant={quote.status === 'DRAFT' ? 'secondary' : 'default'}>{quote.status}</Badge>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>AI Analysis & Findings</CardTitle>
          <CardDescription>Confidence: {(quote.aiFindings.confidence * 100).toFixed(0)}%</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {quote.aiFindings.trees.map((tree: any) => (
            <div key={tree.id} className="p-4 border rounded-md">
              <h4 className="font-semibold">{tree.species}</h4>
              <p className="text-sm text-muted-foreground">
                Height: {tree.height_m}m, Trunk Diameter: {tree.dbh_cm}cm
              </p>
              {tree.hazards.length > 0 && (
                <div className="mt-2">
                  <span className="text-sm font-medium">Hazards: </span>
                  {tree.hazards.map((h: string) => <Badge key={h} variant="destructive" className="mr-1">{h}</Badge>)}
                </div>
              )}
            </div>
          ))}
           <p className="text-sm text-muted-foreground italic">Notes: {quote.aiFindings.notes.join(' ')}</p>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Price Estimate</CardTitle>
        </CardHeader>
        <CardContent>
            {/* Line items would be rendered here */}
            <div className="text-2xl font-bold text-right">
                Total: ${quote.total.toFixed(2)}
            </div>
        </CardContent>
      </Card>
    </div>
  );
}